// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  bio       String?  @default("")
  image     String?  @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  articles Article[]
  comments Comment[]
  favorites FavoriteArticles[]
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String
  body        String
  tagList     Tag[]    @relation("ArticleTags")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id])

  comments    Comment[]
  favorites   FavoriteArticles[]
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[] @relation("ArticleTags")
}

model Comment {
  id         Int      @id @default(autoincrement())
  body       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  article    Article  @relation(fields: [articleId], references: [id])
  articleId  Int
  author     User     @relation(fields: [authorId], references: [id])
  authorId   Int
}

model FavoriteArticles {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int

  @@unique([userId, articleId])
}